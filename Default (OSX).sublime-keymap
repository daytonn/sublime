[
// File Management
// ---------------

  // Open Keybindings file `⌥⌘,`
  {
    "keys": ["alt+super+,"],
    "command": "open_file",
    "args": { "file": "${packages}/User/Default (OSX).sublime-keymap" }
  },

  // Rename file `⇧⌃⌥⌘R`
  {
    "keys": ["super+alt+ctrl+shift+r"],
    "command": "side_bar_rename"
  },

  //  Move file `⇧⌃⌥⌘M`
  {
    "keys": ["super+alt+ctrl+shift+m"],
    "command": "side_bar_move"
  },

  // New file `⌘N`
  {
    "keys": ["super+n"],
    "command": "advanced_new_file_new"
  },

  // Open Latest Migration `⇧⌘M`
  {
    "keys": ["shift+super+m"],
    "command": "rails_latest_migration"
  },

// Limit cycling to group
// ----------------------

  // Cycle previous view within group `⇧⌘[`
  {
    "keys": ["super+shift+["],
    "command": "prev_view_in_group"
  },

  // Cycle next view within group `⇧⌘]`
  {
    "keys": ["super+shift+]"],
    "command": "next_view_in_group"
  },

// Find
// ----

  // Find and Replace in file by default `⌘F`
  {
    "keys": ["super+f"],
    "command": "show_panel",
    "args": {"panel": "replace"}
  },

  // Find and Replace in project by default `⇧⌘F`
  {
    "keys": ["super+shift+f"],
    "command": "show_panel",
    "args": {"panel": "find_in_files"}
  },

  // Replace next match `⌘⌥F`
  {
    "keys": ["super+alt+f"],
    "command": "replace_next"
  },

  // Find previous match `⇧⌘G`
  {
    "keys": ["super+shift+g"],
    "command": "find_prev"
  },

  // Replace selection `⌥⌘F`
  {
    "keys": ["alt+super+f"],
    "command": "replace_next"
  },

// Multiple Cursors
// ----------------

  // Skip selection `⌥⌘D`
  {
    "keys": ["alt+super+d"],
    "command": "find_under_expand_skip"
  },

// Text commands
// -------------

  // Paste and indent by default `⌘V`
  {
    "keys": ["super+v"],
    "command": "paste_and_indent"
  },

  // Sort lines `F5`
  {
    "keys": ["f5"],
    "command": "sort_lines",
    "args": {"case_sensitive": false}
  },

// Window Management
// -----------------

  // Close All windows `⇧⌃⌥⌘W`
  {
    "keys": ["shift+ctrl+alt+super+w"],
    "command": "close_all"
  },

  // Toggle Drawer `⌃⌥⌘D`
  {
    "keys": ["ctrl+alt+super+d"],
    "command": "toggle_side_bar"
  },

  // Toggle Mini Map `⌃⌥⌘M`
  {
    "keys": ["ctrl+alt+super+m"],
    "command": "toggle_minimap"
  },

  // Reopen tab `⇧⌘T`
  {
    "keys": ["shift+super+t"],
    "command": "reopen_last_file"
  },

// Text case
// ---------

  // Uppercase `⌥⌘U`
  {
    "keys": ["ctrl+alt+super+u"],
    "command": "upper_case"
  },

  // Lowercase `⌥⌘L`
  {
    "keys": ["alt+super+l"],
    "command": "lower_case"
  },

  // Titlecase `⌃⌥⌘U`
  {
    "keys": ["alt+super+u"],
    "command": "title_case"
  },

// Text Insertion
// -----------------

  // Pipe Quotes `⇧⌃|`
  {
    "keys": ["ctrl+super+\\"],
    "command": "insert_snippet",
    "args": {"name": "Packages/User/snippets/ruby/pipe-quotes.sublime-snippet"}
  },

  // Hash Rocket `⌥⌘=`
  {
    "keys": ["alt+super+="],
    "command": "insert_snippet",
    "args": {"contents": "=>"}
  },

  // Spermy lock operator `⌥⌘\``
  {
    "keys": ["alt+super+`"],
    "command": "insert_snippet",
    "args": {"contents": "~>"}
  },

  // Insert right parens `⌃0`
  {
    "keys": ["ctrl+0"],
    "command": "insert_snippet",
    "args": {"contents": ")"}
  },

  // Insert left parens `⌃9`
  {
    "keys": ["ctrl+9"],
    "command": "insert_snippet",
    "args": {"contents": "("}
  },

  // Insert double quotes `⌃'`
  {
    "keys": ["ctrl+'"],
    "command": "insert_snippet",
    "args": {"contents": "\""}
  },

  // Stabby Arrow `⌥⌘-`
  {
    "keys": ["alt+super+-"],
    "command": "insert_snippet",
    "args": {"contents": "->"}
  },

  // String to Symbol `⇧⌃:`;
  {
    "keys": ["shift+ctrl+;"],
    "command": "insert_snippet",
    "args": {"name": "Packages/User/snippets/ruby-symbolize.sublime-snippet"}
  },

  // Symbol to String `⇧⌘"`
  {
    "keys": ["shift+super+'"],
    "command": "insert_snippet",
    "args": {"name": "Packages/User/snippets/ruby-unsymbolize.sublime-snippet"}
  },

  // Color picker `⌥⌘C`
  {
    "keys": ["alt+super+c"], "command": "color_pick"
  },

  // Add semicolon at end of line `⌃;`
  {
    "keys": ["ctrl+;"],
    "command": "chain",
    "args": {
      "commands": [
        ["move_to", { "to": "eol" }],
        ["insert_snippet", {"contents": ";"}]
      ]
    }
  },

  // Add semicolon at end of line, insert new line `⇧⌃;`
  {
    "keys": ["shift+ctrl+;"],
    "command": "chain",
    "args": {
      "commands": [
        ["move_to", { "to": "eol" }],
        ["insert_snippet", {"contents": ";"}],
        ["run_macro_file", {"file": "res://Packages/Default/Add Line.sublime-macro"}]
      ]
    }
  },

  // Add comma at end of line `⌃,`
  {
    "keys": ["ctrl+,"],
    "command": "chain",
    "args": {
      "commands": [
        ["move_to", { "to": "eol" }],
        ["insert_snippet", {"contents": ","}]
      ]
    }
  },

  // Add comma at end of line, insert new line `⇧⌃,`
  {
    "keys": ["shift+ctrl+,"],
    "command": "chain",
    "args": {
      "commands": [
        ["move_to", { "to": "eol" }],
        ["insert_snippet", {"contents": ","}],
        ["run_macro_file", {"file": "res://Packages/Default/Add Line.sublime-macro"}]
      ]
    }
  },

  // Add space between the last character `⌃⎵`
  {
    "keys": ["ctrl+space"],
    "command": "chain",
    "args": {

      "commands": [
        ["move_to", { "to": "eol" }],
        ["move", {"by": "characters", "forward": false }],
        ["insert_snippet", {"contents": " "}],
      ]
    }
  },

  {
    "keys": ["ctrl+o"],
    "command": "markdown_preview_select",
    "args": { "target": "browser" }
  },

// Ruby Test
// ---------

  // Run Single Test `⇧⌘R`
  {
    "keys": ["super+r"], "command": "run_single_ruby_test",
    "context": [
      {
        "key": "selector",
        "operator": "equal",
        "operand": "source.ruby, source.rspec, text.gherkin.feature"
      }
    ]
  },

  // All Tests `⌘R`
  {
    "keys": ["shift+super+r"], "command": "run_all_ruby_test",
      "context": [
        {
          "key": "selector",
          "operator": "equal",
          "operand": "source.ruby, source.rspec, text.gherkin.feature"
        }
      ]
  },

  // All Tests (RubyMine Style) `⌘R`
  {
    "keys": ["shift+ctrl+f10"], "command": "run_all_ruby_test",
      "context": [
        {
          "key": "selector",
          "operator": "equal",
          "operand": "source.ruby, source.rspec, text.gherkin.feature"
        }
      ]
  },

  // Run Last Test `⇧⌘E`
  {
    "keys": ["shift+super+e"], "command": "run_last_ruby_test",
    "context": [
      {
        "key": "selector",
        "operator": "equal",
        "operand": "source.ruby, source.rspec, text.gherkin.feature"
      }
    ]
  },

  // Run Last Test (RubyMine style) `⇧⌘E`
  {
    "keys": ["shift+f10"], "command": "run_last_ruby_test",
    "context": [
      {
        "key": "selector",
        "operator": "equal",
        "operand": "source.ruby, source.rspec, text.gherkin.feature"
      }
    ]
  },

  // Toggle Test Console `⇧⌘X`
  {
    "keys": ["shift+super+x"], "command": "show_test_panel"
  },

  // Verify File `⇧⌥V`
  {
    "keys": ["shift+alt+v"], "command": "verify_ruby_file",
    "context": [
      {
        "key": "selector",
        "operator": "equal",
                    "operand": "source.ruby"
      }
    ]
  },

  // Switch between code and test view default to split view `⌘.`
  {
    "keys": ["super+period"],
    "command": "switch_between_code_and_test",
    "args": {"split_view": true},
    "context": [
      {
        "key": "selector",
        "operator": "equal",
        "operand": "source.ruby, source.rspec, text.gherkin.feature"
      }
    ]
  }
]
